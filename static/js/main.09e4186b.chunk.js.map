{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["page","display","flexDirection","justifyContent","width","container","maxWidth","backgroundColor","paddingTop","paddingBottom","statsStyle","padding","borderRadius","playerStyle","enemyStyle","subtext","color","textAlign","App","useState","str","def","dex","lvl","player","setPlayer","enemy","setEnemy","maxDamage","dmg","Math","round","minDamage","normalDamage","chanceToHit","genHp","style","type","name","id","value","onChange","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09e4186b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst page = {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  width: '100%',\n};\n\nconst container = {\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n  width: '600px',\n  maxWidth: '600px',\n  backgroundColor: '#333',\n  paddingTop: '50px',\n  paddingBottom: '50px',\n};\n\nconst statsStyle = {\n  padding: '15px',\n  borderRadius: '15px',\n}\n\nconst playerStyle = {\n  backgroundColor: '#ddd',\n  ...statsStyle,\n};\n\nconst enemyStyle = {\n  backgroundColor: '#f4eef4',\n  ...statsStyle,\n};\n\nconst subtext = {\n  color: '#ddd',\n  textAlign: 'center',\n};\n\nconst App = () => {\n  const [player, setPlayer] = useState({\n    str: 5,\n    def: 5,\n    dex: 5,\n    lvl: 1,\n  });\n  const [enemy, setEnemy] = useState({\n    str: 5,\n    def: 5,\n    dex: 5,\n    lvl: 1,\n  });\n\n  const maxDamage = (str, def) => {\n    const dmg = Math.round(str - 9 / 11 * def);\n    if (dmg <= 20) {\n      return '1-20';\n    }\n    return dmg;\n  };\n\n  const minDamage = (str, def) => {\n    const dmg = Math.round(str - 11 / 9 * def);\n    if (dmg <= 20) {\n      return '1-20';\n    }\n    return dmg;\n  };\n\n  const normalDamage = (str, def) => {\n    const dmg = str - def;\n    if (dmg <= 0) {\n      return 10;\n    }\n    return dmg;\n  };\n\n  const chanceToHit = (dex, def) => (Math.round((dex * 3.5 / def) * 100) / 100);\n\n  const genHp = (lvl) => (5 * (lvl-1) + 50);\n\n\n  return (\n    <div>\n      <div style={page}>\n        <div style={container}>\n          <div style={playerStyle}>\n            <h3>You</h3>\n            <div>Level</div>\n            <input\n              type=\"number\"\n              name=\"player-lvl\"\n              id=\"player-lvl\"\n              value={player.lvl}\n              onChange={(e) => setPlayer({ ...player, lvl: e.target.value })}\n            />\n            <div>STR</div>\n            <input\n              type=\"number\"\n              name=\"player-str\"\n              id=\"player-str\"\n              value={player.str}\n              onChange={(e) => setPlayer({ ...player, str: e.target.value })}\n            />\n            <div>DEF</div>\n            <input\n              type=\"number\"\n              name=\"player-def\"\n              id=\"player-def\"\n              value={player.def}\n              onChange={(e) => setPlayer({ ...player, def: e.target.value })}\n            />\n            <div>DEX</div>\n            <input\n              type=\"number\"\n              name=\"player-dex\"\n              id=\"player-dex\"\n              value={player.dex}\n              onChange={(e) => setPlayer({ ...player, dex: e.target.value })}\n            />\n            <p>{`HP: ${genHp(player.lvl)}`}</p>\n            <p>{`max damage output: ${maxDamage(player.str, enemy.def)}`}</p>\n            <p>{`min damage output: ${minDamage(player.str, enemy.def)}`}</p>\n            <p>{`chance to hit: ${chanceToHit(player.dex, enemy.def)}`}</p>\n            <p>{`Avg. turns to kill enemy: ${Math.round(genHp(enemy.lvl) / normalDamage(player.str, enemy.def) * 10) / 10}`}</p>\n          </div>\n          <div style={enemyStyle}>\n            <h3>Enemy</h3>\n            <div>Level</div>\n            <input\n              type=\"number\"\n              name=\"enemy-lvl\"\n              id=\"enemy-lvl\"\n              value={enemy.lvl}\n              onChange={(e) => setEnemy({ ...enemy, lvl: e.target.value })}\n            />\n            <div>STR</div>\n            <input\n              type=\"number\"\n              name=\"enemy-str\"\n              id=\"enemy-str\"\n              value={enemy.str}\n              onChange={(e) => setEnemy({ ...enemy, str: e.target.value })}\n            />\n            <div>DEF</div>\n            <input\n              type=\"number\"\n              name=\"enemy-def\"\n              id=\"enemy-def\"\n              value={enemy.def}\n              onChange={(e) => setEnemy({ ...enemy, def: e.target.value })}\n            />\n            <div>DEX</div>\n            <input\n              type=\"number\"\n              name=\"enemy-dex\"\n              id=\"enemy-dex\"\n              value={enemy.dex}\n              onChange={(e) => setEnemy({ ...enemy, dex: e.target.value })}\n            />\n            <p>{`HP: ${genHp(enemy.lvl)}`}</p>\n            <p>{`max damage output: ${maxDamage(enemy.str, player.def)}`}</p>\n            <p>{`min damage output: ${minDamage(enemy.str, player.def)}`}</p>\n            <p>{`chance to hit: ${chanceToHit(enemy.dex, player.def)}`}</p>\n            <p>{`Avg. turns to kill enemy: ${Math.round(genHp(player.lvl) / normalDamage(enemy.str, player.def) * 10) / 10}`}</p>\n          </div>\n        </div>\n      </div>\n      <h3 style={subtext}>This calculator was made by Lunatico64</h3>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}